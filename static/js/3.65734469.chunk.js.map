{"version":3,"file":"static/js/3.65734469.chunk.js","mappings":"4KACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,kBCajN,EAVwC,SAACA,GACrC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAb,eAAoB,gBAAKK,IAAKN,EAAMO,SAApC,KAAiDP,EAAMQ,SAGlE,ECFD,EANqC,SAACR,GAClC,OACI,iBAAKG,UAAWC,EAAhB,cAA6BJ,EAAMS,QAAnC,MAEP,E,6BC0BKC,GAAcC,EAAAA,EAAAA,GAAiB,IAe/BC,GAAsBC,EAAAA,EAAAA,GAAoD,CAACC,KAAM,wBAA3DD,EAbyF,SAACb,GAClH,OACI,kBAAMe,SAAUf,EAAMgB,aAAtB,WACI,0BACEC,EAAAA,EAAAA,IAAoC,qBAAsB,iBAAkBC,EAAAA,GAAU,CAACC,EAAAA,EAAST,OAElG,0BACI,yCAIf,IAID,EA1CqC,SAACV,GAElC,IAAIoB,EAAQpB,EAAMqB,YAEdC,EAAiBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYjB,KAAMiB,EAAEjB,KAAMN,GAAIuB,EAAEvB,GAAIK,OAAQkB,EAAElB,QAAlD,IACpCmB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASnB,QAASmB,EAAEnB,SAAxB,IAO3C,OACI,iBAAKN,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKkB,KAEL,gBAAKnB,UAAWC,EAAhB,SACKsB,KAEL,SAACd,EAAD,CAAqBG,SAbT,SAACc,GACjB7B,EAAM8B,YAAYD,EAAOE,gBACzBF,EAAOE,eAAiB,EAC3B,MAaJ,E,mBCfD,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KARkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE1B,IAIU,UAAsBa,EAAAA,IAC7BC,EAAAA,EAFJ,CAGGC,E,kICfCC,EAA6B,SAACjB,GAAD,MAA0B,CACzDkB,OAAQlB,EAAMmB,KAAKD,OADY,EAW1B,SAASH,EAAsBK,GAapC,OAJqCP,EAAAA,EAAAA,IAClCI,EADkCJ,EARiC,SAACjC,GACrE,IAAMsC,EAAyBtC,EAAzBsC,OAAWG,GAAjB,OAA+BzC,EAA/B,GACA,OAAKsC,GAEE,SAACE,GAAD,UAAsBC,KAFT,SAAC,KAAD,CAAUpC,GAAG,UAGlC,GAQF,C","sources":["webpack://react-01/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__4aYpv\",\"dialogsItems\":\"Dialogs_dialogsItems__lPBP+\",\"dialog\":\"Dialogs_dialog__5sLjs\",\"active\":\"Dialogs_active__o7qrP\",\"messages\":\"Dialogs_messages__DPdTf\",\"message\":\"Dialogs_message__uEltY\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}> <img src={props.avatar} />  {props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}> {props.message} </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n\r\ntype PropsType = {\r\n    message: string\r\n}","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { CreateField, Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, reqired } from \"../../utils/validators/validators\";\r\nimport { InitialStateType } from \"src/redux/dialogs-reducer\";\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElement = state.dialogs.map(d => <DialogItem name={d.name} id={d.id} avatar={d.avatar} />)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} />)\r\n\r\n    let addNewMessage = (values: {newMessageBody: string}) => {\r\n        props.sendMessage(values.newMessageBody);\r\n        values.newMessageBody = '';\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, MessageFormPropsType> & MessageFormPropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n            { CreateField<NewMessageFormTypeKeys>('Enter your message', 'newMessageBody', Textarea, [reqired, maxLength50]) }\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormType, MessageFormPropsType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n\r\ntype NewMessageFormType = {\r\n    newMessageBody: string\r\n    \r\n}\r\ntype NewMessageFormTypeKeys = Extract< keyof NewMessageFormType, string >\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\ntype MessageFormPropsType = {}","import React from \"react\";\r\nimport { actions } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"src/redux/redux-store\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n) (Dialogs)\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from 'react-router-dom'\r\nimport { AppStateType } from 'src/redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let { isAuth, ...restProps } = props\r\n    if (!isAuth) return <Navigate to='/login' />;\r\n    //@ts-ignore\r\n    return <WrappedComponent {...restProps as unknown as WCP} />\r\n  }\r\n\r\n\r\n  let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>\r\n    (mapStateToPropsForRedirect)\r\n    (RedirectComponent)\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}"],"names":["props","path","id","className","s","to","src","avatar","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","CreateField","Textarea","reqired","state","dialogsPage","dialogsElement","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","compose","connect","actions","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","restProps"],"sourceRoot":""}