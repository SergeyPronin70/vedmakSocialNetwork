{"version":3,"file":"static/js/585.14590517.chunk.js","mappings":"0JAeMA,EAAiB,WACnB,OAAkCC,EAAAA,EAAAA,UAA2B,MAA7D,eAAOC,EAAP,KAAkBC,EAAlB,KAuBA,OAtBAC,EAAAA,EAAAA,YAAU,WACN,IAAIC,EACEC,EAAe,WACjBC,QAAQC,IAAI,YACZC,WAAYC,EAAe,IAC9B,EACD,SAASA,IAAkB,IAAD,IACpB,QAAF,EAAAL,SAAA,SAAIM,oBAAoB,QAASL,GAC/B,QAAF,EAAAD,SAAA,SAAIO,QAEJP,EAAK,IAAIQ,UAAU,gEACV,OAATX,QAAS,IAATA,GAAAA,EAAWY,iBAAiB,QAASR,GACrCH,EAAaE,EAChB,CAGD,OAFAK,IAEO,WAAO,IAAD,IACP,QAAF,EAAAL,SAAA,SAAIM,oBAAoB,QAASL,GAC/B,QAAF,EAAAD,SAAA,SAAIO,OACP,CACJ,GAAE,KAEI,4BACH,SAACG,EAAD,CAAUb,UAAWA,KACrB,SAACc,EAAD,CAAgBd,UAAWA,MAElC,EAEKa,EAAoD,SAAC,GAAiB,IAAhBb,EAAe,EAAfA,UAC5D,GAAgCD,EAAAA,EAAAA,UAA4B,IAA5D,eAAOgB,EAAP,KAAiBC,EAAjB,KAgBI,OAdAd,EAAAA,EAAAA,YAAU,WACN,IAAIe,EAAiB,SAACC,GAClB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BN,GAAY,SAACO,GAAD,wBAAsBA,IAAtB,OAAuCJ,GAAvC,GACf,EAGD,OAFS,OAATnB,QAAS,IAATA,GAAAA,EAAWY,iBAAiB,UAAWK,GAEhC,WACM,OAATjB,QAAS,IAATA,GAAAA,EAAWS,oBAAoB,UAAWQ,GACjC,OAATjB,QAAS,IAATA,GAAAA,EAAWU,OACd,CAEJ,GAAE,CAACV,KAEG,gBAAKwB,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAzC,SACFX,EAASY,KAAI,SAACC,EAAGC,GAAJ,OAAc,SAACC,EAAD,CAAqBC,QAASH,GAAhBC,EAA5B,KAErB,EACKC,EAAgD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAEpD,OAAO,4BACH,gBAAKC,IAAKD,EAAQE,MAAOT,MAAO,CAACU,MAAO,UADrC,KACiD,uBAAIH,EAAQI,YAChE,kBACCJ,EAAQA,SACT,oBAEP,EAEKjB,EAA0D,SAAC,GAAiB,IAAhBd,EAAe,EAAfA,UAElE,GAA8BD,EAAAA,EAAAA,UAAS,IAAvC,eAAOgC,EAAP,KAAgBK,EAAhB,KACA,GAAsCrC,EAAAA,EAAAA,UAA8B,WAApE,eAAOsC,EAAP,KAAoBC,EAApB,MAEApC,EAAAA,EAAAA,YAAU,WACN,IAAMqC,EAAc,WAChBD,EAAe,QAClB,EAGL,OAFS,OAATtC,QAAS,IAATA,GAAAA,EAAWY,iBAAiB,OAAQ2B,GAE7B,WACM,OAATvC,QAAS,IAATA,GAAAA,EAAWS,oBAAoB,OAAQ8B,EAC1C,CAEA,GAAE,CAACvC,IASA,OAAO,4BACH,0BACA,qBAAUwC,SAAU,SAACtB,GAAOkB,EAAWlB,EAAEuB,cAAcC,MAAO,EAAEA,MAAOX,OAEvE,0BACA,mBAAQY,SAAwB,OAAd3C,GAAqC,UAAfqC,EAAwBO,QAbhD,WACXb,IAGA,OAAT/B,QAAS,IAATA,GAAAA,EAAW6C,KAAKd,GAChBK,EAAW,IACd,EAOO,sBAGP,EAED,UArG2B,WACvB,OAAO,0BACH,SAACtC,EAAD,KAEP,C","sources":["pages/chat/ChatPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\ntype ChatMessageType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string\r\n  }\r\n \r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => { \r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n    useEffect(() => {\r\n        let ws: WebSocket\r\n        const closeHandler = () => {\r\n            console.log('CLOSE WS')\r\n            setTimeout( createChannel, 3000)\r\n        }\r\n        function createChannel () {\r\n            ws?.removeEventListener('close', closeHandler)\r\n            ws?.close()\r\n            \r\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n            wsChannel?.addEventListener('close', closeHandler)\r\n            setWsChannel(ws)  \r\n        }\r\n        createChannel()\r\n\r\n        return () => {\r\n            ws?.removeEventListener('close', closeHandler)\r\n            ws?.close()\r\n        }\r\n    }, [])\r\n    \r\n    return <div>\r\n        <Messages wsChannel={wsChannel} />\r\n        <AddMessageForm wsChannel={wsChannel} />\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{wsChannel: WebSocket | null}> = ({wsChannel}) => {\r\nconst [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n    useEffect(() => {\r\n        let messageHandler = (e: MessageEvent) => {\r\n            let newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\r\n        }\r\n        wsChannel?.addEventListener('message', messageHandler)\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('message', messageHandler)\r\n            wsChannel?.close()\r\n        }\r\n        \r\n    }, [wsChannel])\r\n        \r\n    return <div style={{height: '500px', overflowY: 'auto' }}>\r\n        {messages.map((m, index) => <Message key={index} message={m} />)}\r\n    </div>\r\n}\r\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\r\n    \r\n    return <div>\r\n        <img src={message.photo} style={{width: '30px'}} /> <b>{message.userName}</b> \r\n        <br />\r\n        {message.message}\r\n        <hr />\r\n    </div>\r\n}\r\n\r\nconst AddMessageForm: React.FC<{wsChannel: WebSocket | null}> = ({wsChannel}) => {\r\n\r\nconst [message, setMessage] = useState('')\r\nconst [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\nuseEffect(() => {\r\n    const openHandler = () => {\r\n        setReadyStatus('ready')\r\n    }\r\nwsChannel?.addEventListener('open', openHandler)\r\n\r\nreturn () => {\r\n    wsChannel?.removeEventListener('open', openHandler)\r\n}\r\n\r\n}, [wsChannel])\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n    wsChannel?.send(message)\r\n    setMessage('')\r\n}\r\n\r\n    return <div>\r\n        <div>\r\n        <textarea onChange={(e) => {setMessage(e.currentTarget.value)}} value={message} ></textarea>\r\n        </div>\r\n        <div>\r\n        <button disabled={wsChannel === null || readyStatus !=='ready'} onClick={sendMessage}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"names":["Chat","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","console","log","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessageForm","messages","setMessages","messageHandler","e","newMessages","JSON","parse","data","prevMessages","style","height","overflowY","map","m","index","Message","message","src","photo","width","userName","setMessage","readyStatus","setReadyStatus","openHandler","onChange","currentTarget","value","disabled","onClick","send"],"sourceRoot":""}